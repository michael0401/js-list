{"name":"Js-list.js","tagline":"Extensible list functions.","body":"#JS-List.js\r\n\r\njs-list.js is a utility module which provide functions for operating with linked list. It can be used both in the [node.js](http://nodejs.org) and browser.\r\n\r\n##Download\r\n\r\nThe source code is available for download from [GitHub](https://github.com/rranauro/js-list). Besides that, you can also install using Node Package Manager ([npm](https://npmjs.org)):\r\n\r\n    npm install js-list\r\n\r\n##Documentation\r\n\r\n* [List.Root](#List.Root)\r\n* [addChild](#addChild)\r\n* [firstChild](#firstChild)\r\n* [lastChild](#lastChild)\r\n* [construct](#construct)\r\n* [insertFirstChild](#insertFirstChild)\r\n* [insertChild](#insertChild)\r\n* [Id](#Id)\r\n* [spliceIn](#spliceIn)\r\n* [spliceOut](#spliceOut)\r\n* [nextSibling](#nextSibling)\r\n* [previousSibling](#previousSibling)\r\n* [firstSibling](#firstSibling)\r\n* [lastSibling](#lastSibling)\r\n* [siblings](#siblings)\r\n* [parent](#parent)\r\n* [grandParent](#grandParent)\r\n\r\n<a name=\"List.Root\" />\r\n### List.Root(object)\r\n\r\nInitialize and return a root with the given values object.\r\n\r\n__Example:__\r\n\r\n    var L = new List.Root({'id':'root'})\r\n    \r\n__Result:__\r\n\r\n![tree 1](https://raw.github.com/michael0401/Pictures/master/tree1.png)\r\n\r\n<a name=\"addChild\" />\r\n### addChild(object)\r\n\r\nBuild a node with given values object and add to the given node as a child.\r\n\r\n__Example:__\r\n\r\n    L.addChild({'id': 'a'}).Id('a');\r\n    L.addChild({'id': 'b'}).Id('b');\r\n    L.addChild({'id': 'c'}).Id('c');\r\n    \r\n__Result:__\r\n\r\n![tree 2](https://raw.github.com/michael0401/Pictures/master/tree2.png)\r\n\r\n<a name=\"firstChild\" />\r\n### firstChild()\r\n\r\nReturn the first child node of the given node.\r\n\r\n__Example:__\r\n\r\n    L.firstChild().id\r\n    \r\n__Result:__\r\n\r\n    a\r\n    \r\n<a name=\"lastChild\" />\r\n### lastChild()\r\n\r\nReturn the last child node of the given node.\r\n\r\n__Example:__\r\n\r\n    L.lastChild().id\r\n    \r\n__Result:__\r\n\r\n    c\r\n    \r\n<a name=\"construct\" />\r\n### construct(object)\r\n\r\nBuild a node with given values object.\r\n\r\n__Example:__\r\n\r\n    var newFirstChild = L.construct({'id': 'head'});\r\n    var newLastChild = L.construct({'id': 'tail'});\r\n    \r\n__Result:__\r\n\r\n![tree 3](https://raw.github.com/michael0401/Pictures/master/tree3.png)\r\n\r\n<a name=\"insertFirstChild\" />\r\n### insertFirstChild(newNode)\r\n\r\nAdd a new node to the first child position of the given node.\r\n\r\n__Example:__\r\n\r\n    L.insertFirstChild(newFirstChild)\r\n    \r\n__Result:__\r\n\r\n![tree 4](https://raw.github.com/michael0401/Pictures/master/tree4.png)\r\n\r\n<a name=\"insertChild\" />\r\n### insertChild(newNode)\r\n\r\nAdd a new node to the last child position of the given node.\r\n\r\n__Example:__\r\n\r\n    L.insertChild(newLastChild)\r\n    \r\n__Result:__\r\n\r\n![tree 5](https://raw.github.com/michael0401/Pictures/master/tree5.png)\r\n\r\n<a name=\"Id\" />\r\n### Id(argument)\r\n\r\nIf the argument is empty, return the id of the given node. If the argument is not empty, traverse down from the given node and find the first node with the id matching the argument.\r\n\r\n__Alias:__ find\r\n\r\n__Example:__\r\n\r\n    L.Id('b').id\r\n    \r\n__Result:__\r\n\r\n    b\r\n    \r\n<a name=\"spliceIn\" />\r\n### spliceIn(newNode)\r\n\r\nAdd a new node to the next sibling position of the given node.\r\n\r\n__Example:__\r\n\r\n    L.Id('c').spliceIn(L.construct({'id': 'd' }))\r\n    \r\n__Result:__\r\n\r\n![tree 6](https://raw.github.com/michael0401/Pictures/master/tree6.png)\r\n \r\n<a name=\"spliceOut\" />\r\n### spliceOut()\r\n\r\nDelete the given node from the siblings. If the given node is the head of the sibling list, return the second node. If the give node is not the head of the sibling list, return the one before the given node.\r\n\r\n__Example:__\r\n\r\n    L.Id('a').spliceOut().id\r\n\r\n__Result:__\r\n\r\n    head\r\n\r\n![tree 7](https://raw.github.com/michael0401/Pictures/master/tree7.png)\r\n\r\n<a name=\"nextSibling\" />\r\n### nextSibling()\r\n\r\nReturn the next sibling of the given node.\r\n\r\n__Example:__\r\n\r\n    L.Id('head').nextSibling().id\r\n\r\n__Result:__\r\n\r\n    b\r\n    \r\n<a name=\"previousSibling\" />\r\n### previousSibling()\r\n\r\nReturn the previous sibling of the given node.\r\n\r\n__Example:__\r\n\r\n    L.Id('b').previousSibling().id\r\n\r\n__Result:__\r\n\r\n    head\r\n    \r\n<a name=\"firstSibling\" />\r\n### firstSibling()\r\n\r\nReturn the first sibling of the given node.\r\n\r\n__Example:__\r\n\r\n    L.Id('tail').firstSibling().id\r\n\r\n__Result:__\r\n\r\n    head\r\n\r\n<a name=\"lastSibling\" />\r\n### lastSibling()\r\n\r\nReturn the last sibling of the given node.\r\n\r\n__Example:__\r\n\r\n    L.Id('b').lastSibling().id\r\n\r\n__Result:__\r\n\r\n    tail\r\n  \r\n<a name=\"siblings\" />\r\n### siblings()\r\n\r\nReturn the siblings of the given node as an array.\r\n\r\n__Example:__\r\n\r\n    L.Id('b').siblings()[0].id\r\n\r\n__Result:__\r\n\r\n    head\r\n  \r\n<a name=\"parent\" />\r\n### parent()\r\n\r\nReturn the parent of the given node.\r\n\r\n__Example:__\r\n\r\n    L.Id('b').parent().id\r\n\r\n__Result:__\r\n\r\n    root\r\n     \r\n<a name=\"grandParent\" />\r\n### grandParent()\r\n\r\nReturn the grandparent of the given node.\r\n\r\n__Example:__\r\n\r\n    L.Id('b').addChild({'id': 'grandchild'});\r\n    L.Id('grandchild').grandParent().id\r\n\r\n__Result:__\r\n\r\n    root\r\n![tree 8](https://raw.github.com/michael0401/Pictures/master/tree8.png)\r\n  \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}